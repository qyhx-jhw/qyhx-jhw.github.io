<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jhw 博客网站</title>
    <link>https://jhweb.top/</link>
    <description>Recent content on jhw 博客网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 31 Jul 2020 15:37:16 +0800</lastBuildDate>
    
	<atom:link href="https://jhweb.top/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux-文件和目录列表</title>
      <link>https://jhweb.top/linux/linux/</link>
      <pubDate>Sat, 20 Jun 2020 14:51:56 +0800</pubDate>
      
      <guid>https://jhweb.top/linux/linux/</guid>
      <description>常见的Linux顶层虚拟目录及内容     目录 用途     / 虚拟目录的根目录。通常不会在这存储文件。   /bin 二进制目录。存放许多用户级的GNU工具。   /boot 启动目录，存放启动文件。   /dev 设备目录，Linux在这里创建设备节点。   /etc 系统设备文件目录。   /home 主目录，Linux在这里创建用户目录。   /lib 库目录，存放系统和应用程序的库文件.   /media 媒体目录，可移动媒体设备的常用挂载点。   /mnt 挂载目录，另一个可移动媒体设备的常用挂载点。   /opt 可选目录，常用于存放第三方软件包和数据文件。   /proc 进程目录，存放现有硬件及当前进程的相关信息。   /root root用户的主目录。   /sbin 系统二进制目录，存放许多GNU管理员及工具。   /run 运行目录，存放系统运作时的运行数据。   /srv 服务目录，存放本地服务的相关文件。   /sys 系统目录，存放系统硬件信息的相关文件。   /tmp 临时目录，可以在目录中创建和删除临时工作文件。   /usr 用户二进制目录，大量用户级的GUN工具和数据文件都存储在这里。   /var 可变目录，用以存放经常变化的文件，比如日志文件。     遍历目录 &amp;lsquo;cd&amp;rsquo; 在Linux文件系统上，可以使用cd将shell会话切换到另一个目录。   绝对文件路径：使用请明确的文件路径</description>
    </item>
    
    <item>
      <title>Linux文件管理</title>
      <link>https://jhweb.top/linux/linux_make_file/</link>
      <pubDate>Sat, 27 Jun 2020 15:32:51 +0800</pubDate>
      
      <guid>https://jhweb.top/linux/linux_make_file/</guid>
      <description>[TOC]
创建文件   touch命令创建文件
[root@CentOS7 ~/dir1]#touch test_one [root@CentOS7 ~/dir1]#ll total 0 -rw-r--r--. 1 root root 0 Jun 27 15:41 test_one   复制文件  cp命令完成复制文件的操作：cp source[要复制的文件] destination[目标] 复制于test_one一样的文件test_tow  [root@CentOS7 ~/dir1]#cp test_one test_tow [root@CentOS7 ~/dir1]#ll total 0 -rw-r--r--. 1 root root 0 Jun 27 15:41 test_one -rw-r--r--. 1 root root 0 Jun 27 15:47 test_tow [root@CentOS7 ~/dir1]#  cp -i 新的文件已经存在（test_tow），强制询问是否需要覆盖原文件 也可以复制到现有的其它目录中cp -i test_one ../dir2   [root@CentOS7 ~/dir2]#cd .</description>
    </item>
    
    <item>
      <title>Linux_系统管理命令</title>
      <link>https://jhweb.top/linux/linux_%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 30 Jun 2020 15:09:26 +0800</pubDate>
      
      <guid>https://jhweb.top/linux/linux_%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</guid>
      <description>一.监测程序   探查进程
 进程（process），ps命令输出 支持三种不同类型的命令行参数   Unix风格参数
   参数 描述     -A 显示所有进程   -N 显示与指定参数不符的所有进程   -a 显示除控制进程（session leader ① ）和无终端进程外的所有进程   -d 显示除控制进程外的所有进程   -e 显示所有进程   -C cmdlist 显示包含在 cmdlist 列表中的进程   -G grplist 显示组ID在 grplist 列表中的进程   -U userlist 显示属主的用户ID在 userlist 列表中的进程   -g grplist 显示会话或组ID在 grplist 列表中的进程 ②   -p pidlist 显示PID在 pidlist 列表中的进程   -s sesslist 显示会话ID在 sesslist 列表中的进程   -t ttylist 显示终端ID在 ttylist 列表中的进程   -u userlist 显示有效用户ID在 userlist 列表中的进程   -F 显示更多额外输出（相对 -f 参数而言）   -O format 显示默认的输出列以及 format 列表指定的特定列   -M 显示进程的安全信息   -c 显示进程的额外调度器信息   -f 显示完整格式的输出   -j 显示任务信息   -l 显示长列表   -o format 仅显示由 format 指定的列   -y 不要显示进程标记（process flag，表明进程状态的标记）   -Z 显示安全标签（security context） ① 信息   -H 用层级格式来显示进程（树状，用来显示父进程）   -n namelist 定义了 WCHAN 列显示的值   -w 采用宽输出模式，不限宽度显示   -L 显示进程中的线程   -V 显示 ps 命令的版本号      UID:启动这些进程的用户 PID：进程的进程ID PPID：父进程的进程号 C:进程生命周期中CPU利用率 STIME：进程启动时的系统时间 TTY：进程启动时的终端设备 TIME：运行进程所需要累计CPU时间 CMD：启动的程序名称     BSD风格参数</description>
    </item>
    
    <item>
      <title>Python：排序与查找</title>
      <link>https://jhweb.top/python/python_sort_search/</link>
      <pubDate>Mon, 29 Jun 2020 17:05:32 +0800</pubDate>
      
      <guid>https://jhweb.top/python/python_sort_search/</guid>
      <description>课程来自于：数据结构与算法Python版&amp;ndash;北京大学&amp;ndash;陈斌老师 顺序查找Sequential Search  如果数据项保存在如列表这样的集合中我们会称这些数据项具有线性或者顺序关系。 在Python List中,这些数据项的存储位置称为下标( index) , 这些下标都是有序的整数。 通过下标,我们就可以按照顺序来访问和查找数据项,这种技术称为&amp;quot;顺序查找” def sequentialSearch(alist, item): pos = 0 found = False while pos &amp;lt; len(alist) and not found: if alist[pos] == item: found = True else: pos += 1 return found   二分查找 # 二分查找：有序表 def binarySearch(alist, item): first = 0 # 起点 last = len(alist) - 1 # 终点 found = False while first &amp;lt;= last and not found: midpoint = (first + last) // 2 # 中间下标 if alist[midpoint] == item: found = True else: if item &amp;lt; alist[midpoint]: last = midpoint - 1 else: first = midpoint + 1 return found 二分查找递归版本 def binarySearch(alist: list, item): if len(alist) == 0: return False else: midpoint = len(alist) // 2 # 在中间下标 if alist[midpoint] == item: return True else: if item &amp;lt; alist[midpoint]: return binarySearch(alist[:midpoint], item) else: return binarySearch(alist[midpoint + 1:], item) # +1是包左不包右（左闭右开）  1.</description>
    </item>
    
    <item>
      <title>Python数据结构--概述</title>
      <link>https://jhweb.top/python/python/</link>
      <pubDate>Sat, 20 Jun 2020 14:50:24 +0800</pubDate>
      
      <guid>https://jhweb.top/python/python/</guid>
      <description>一、概述 数据： 电影《超时空接触》   问题：未知的事物？
  人类在生活生产，学习探索创造过程中遇到的未知事物
  如何从未知到已知
 感觉、经验、占卜、求神、 逻辑、数学、实验、 工程、 计算、 模型、模拟、仿真、 哲学？    提出有穷观点的能行方法概念是：希尔伯特
 由有限数量的明确有限指令构成 指令执行在有限步骤后终止 指令每次执行都总能得到唯一结果 原则上可以由单独采用纸笔完成，而不是依靠其它辅助 每一条指令可以机械的被精确的执行，而不需要智慧和灵感    20世纪30年代，几个关于计算的数学模型
 哥德尔和克莱尼的递归函数模型 求其的Lambda演算模型 波斯特的Post机模型 图灵的图灵机模型    图灵机Turing Machine   1936年，Alan Turing提出的一种抽象计算模型
 基本思想是用机器模拟人们使用纸笔进行数学运算的过程，但比数值计算更为简答。    《The Imitation Game 2014》模仿游戏
  图灵机的规则由五个部分来构成。
  算法和计算复杂性   What：是什么？
 面向判断与分类的问题    Why：问什么？</description>
    </item>
    
    <item>
      <title>Python_协程</title>
      <link>https://jhweb.top/python/python_%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Fri, 31 Jul 2020 15:37:16 +0800</pubDate>
      
      <guid>https://jhweb.top/python/python_%E5%8D%8F%E7%A8%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>OSI七层模型</title>
      <link>https://jhweb.top/computer_network/computer_network/</link>
      <pubDate>Sun, 26 Jul 2020 20:04:17 +0800</pubDate>
      
      <guid>https://jhweb.top/computer_network/computer_network/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://jhweb.top/git/</link>
      <pubDate>Fri, 31 Jul 2020 15:55:13 +0800</pubDate>
      
      <guid>https://jhweb.top/git/</guid>
      <description>安装 [官网] (https://git-scm.com/downloads) 下载对应的Git客户端
Linux # yum install git windows 下载对应32或64版本
 概念  Repository仓库，版本库 git初始化，在当前目录生成一个.git目录  Git的文件分类  忽略文件lgnored，git不在关注的文件  移动和删除   git mv src dest 改名，直接修改
  git rm file 会同时是在版本库和工作目录中删除
  </description>
    </item>
    
    <item>
      <title>工具</title>
      <link>https://jhweb.top/python/tools/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jhweb.top/python/tools/</guid>
      <description>Python 《维基百科》-&amp;gt;
  Python是一种广泛使用的解释型、高级编程、通用型编程语言，由吉多·范罗苏姆创造，第一版发布于1991年。Python是ABC语言的后继者，也可以视之为一种使用传统中缀表达式的LISP方言[4]。Python的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比于C++或Java，Python让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。
  与Scheme、Ruby、Perl、Tcl等动态类型编程语言一样，Python拥有动态类型系统和垃圾回收功能，能够自动管理内存使用，并且支持多种编程范式，包括面向对象、命令式、函数式和过程式编程。其本身拥有一个巨大而广泛的标准库。
  Python 解释器本身几乎可以在所有的操作系统中运行。Python的其中一个解释器CPython是用C语言编写的、是一个由社群驱动的自由软件，目前由Python软件基金会管理。
   Pycharm  PyCharm是一个用于计算机编程的集成开发环境，主要用于Python语言开发，由捷克公司JetBrains开发，提供代码分析、图形化调试器，集成测试器、集成版本控制系统，并支持使用Django进行网页开发。 PyCharm是一个跨平台开发环境，拥有Microsoft Windows、macOS和Linux版本。   Tengine Tengine是由淘宝网发起的Web服务器项目。
 Tengine是一个由淘宝从Nginx复刻出来的HTTP服务器，现时版本为2.2.2。Tengine对Nginx的修改版本是于2011年12月开始释放出来成为开源项目，两者配置兼容。  </description>
    </item>
    
    <item>
      <title>简历</title>
      <link>https://jhweb.top/about/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jhweb.top/about/</guid>
      <description>联系方式  手机：15716619548 Email：15716619548@163.com 微信号：15716619548  个人信息  蒋浩文/男/1997 本科/南阳理工学院/软件学院 工作年限：2020年应届 技术博客：https://jhweb.top Github: https://github.com/qyhx-jhw/   期望职位：后端开发相关岗位  项目经历  项目名称：人事信息管理项目 项目简介：将琐碎的人事工作在系统中实现，简单便携化。 主要工作：  主要负责前端界面的设计与实现，后端服务器设计搭建，实现前后端交互。 前端网页的实现采用了 JavaScript 中的 React 库，进行搭建实现，React 使得前端设计也实现了模块化开发。 界面组件采用了 Ant Design 的组件。 与后端交互用到了 axios 库将数据 Json 处理进行传输。 后端服务使用了 Django 框架。 数据存储用到了关系型数据库 MySQL。    技能清单  以下是我熟练使用的技能  编程语言：Python · 后端框架：Django · 前端框架：React   以下是我接触并了解的技能  Redis 数据库，Linux 的基本命令，Nginx    </description>
    </item>
    
  </channel>
</rss>